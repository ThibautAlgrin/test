    /**
{% block phpdoc_method_header %}
    * Test update one {{ entity }}
{% endblock phpdoc_method_header %}
{% block phpdoc_method_annotations %}
    * @depends testCgetAction
{% endblock phpdoc_method_annotations %}
    */
{% block method_definition %}
    public function testPutAction()
{% endblock method_definition %}
    {
{% block method_body %}
        $headers = array('CONTENT_TYPE' => 'application/json');
        $id = $this->getOneId();
        $data = [
            '{{ entity | lower }}' => []
        ];
        $url = $this->router->generate('{{ routes['put'] }}', [
            '_format' => 'json',
            'entity' => $id
        ]);
        $this->client->request(Request::METHOD_PUT, $url, $data, [], $headers);
        $this->assertTrue($this->client->getResponse()->isSuccessful());
        $content = $this->client->getResponse()->getContent();
        $this->assertTrue(is_string($content));
        $json = json_decode($content, true);
        $this->assertTrue(is_array($json));
        $this->assertNotEmpty($json);
        $this->assertArrayNotHasKey('errors', $json);
        $this->assertArrayHasKey('id', $json);
        $this->assertNotNull($json['id']);
        foreach ($data['{{ entity | lower }}'] as $name => $value) {
            $this->assertArrayHasKey($name, $json);
            $this->assertEquals($value, $json[$name]);
        }
{% endblock method_body %}
{% block method_return '' %}
    }
{% block form '' %}

